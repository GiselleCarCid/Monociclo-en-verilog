//Encabezado
module monociclo(
   input           clk_i,
	input           rst_ni,
	output  [31:0]  salida_o
);
   //SECCIÓN DE DECLARACIÓN DE SEÑALES
	reg   [31:0]  pc_r;
	wire  [31:0]  pcnext_w;
	wire  [31:0]  if_inst_o;
	wire  [31:0]  ex_resultado_o;
	wire  [31:0]  wb_resultado_o;
	wire          c_o;
	wire  [31:0]  es_dato_o;
	wire  [31:0]  muxalu_dato_o;
	wire  [31:0]  rf_dators2_o;
	wire          id_regwrite_o;
	wire          id_alusrc_o;
	
	
	//Seccion de asignacion de señales para monitoreo en FPGA
	assign    salida_o = if_inst_o;
	
	
	//Calculo de PC
   always @(posedge clk_i, negedge rst_ni)
	begin 
	   if(!rst_ni)
		  pc_r  <= 32'b0;
		else
	   pc_r <= pcnext_w; //La salida toma el valor d ela entrada
	end 
	
	assign pcnext_w = pc_r + 32'h4;
	
	//Instancia de la memoria de instrucciones
	
	icache icache_u0(
	  .rdaddr_i  (pc_r[7:2]),
	  .inst_o    (if_inst_o)
	);
	
	//Etapa de decodificacion
	
	decodificador decode_u0(
      .opcode_i          (if_inst_o[6:0]),
		.regwrite          (id_regwrite_o),
		.alusrc_o          (id_alusrc_o)
	);
	
	
	//Tarea - Conectar el banco de registros
	  //rf_dators2_o
	
	
	//Extension de signo
	
	extensiondesigno extend_u3 (
	   .instruccion_i     (if_inst_o),
		.inmediato_o       (es_dato_o)
	);
	
	//Multiplexor para el segundo operando de la ALU
	assign muxalu_dato_o = (id_alusrc_o) ? es_dato_o : rf_dators2_o;
	
	//Conexion a la ALU
	ALUNBits #(
	    .N   (32)
	)
	(
	    .a_i         (),
		 .b_i         (),
		 .c_i         (if_inst_o[30]),
		 .invert_i    (if_inst_o[30]),
		 .less_i      (),
		 .operacion_i ({if_inst_o[30],if_inst_o[14:12]}),
		 .salida_o    (ex_resultado_o),
		 .c_o         (c_o)
	);
		 
	
	//Conectar wb_resultado
	assign wb_resultado_o = ex_resultado_o;
	

endmodule 